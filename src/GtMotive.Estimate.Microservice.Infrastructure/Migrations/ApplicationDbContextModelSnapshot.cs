// <auto-generated />
using System;
using GtMotive.Estimate.Microservice.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GtMotive.Estimate.Microservice.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Seat",
                            Model = "Leon",
                            RegistrationNumber = "6296HKZ",
                            Year = 2021
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Volkswagen",
                            Model = "Golf",
                            RegistrationNumber = "6734IOP",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Toyota",
                            Model = "Corolla",
                            RegistrationNumber = "3462CVB",
                            Year = 2021
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Ford",
                            Model = "Focus",
                            RegistrationNumber = "1982AYZ",
                            Year = 2022
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Renault",
                            Model = "Megane",
                            RegistrationNumber = "4512ERX",
                            Year = 2023
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Peugeot",
                            Model = "308",
                            RegistrationNumber = "7283LMN",
                            Year = 2022
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Hyundai",
                            Model = "i30",
                            RegistrationNumber = "9845BCD",
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Kia",
                            Model = "Ceed",
                            RegistrationNumber = "5621FGH",
                            Year = 2021
                        },
                        new
                        {
                            Id = 9,
                            Brand = "BMW",
                            Model = "Serie 1",
                            RegistrationNumber = "3147QWE",
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Audi",
                            Model = "A3",
                            RegistrationNumber = "8762RTY",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.Rental", b =>
                {
                    b.HasOne("GtMotive.Estimate.Microservice.Domain.Entities.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GtMotive.Estimate.Microservice.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.User", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("GtMotive.Estimate.Microservice.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
